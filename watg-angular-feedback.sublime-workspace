{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tolga",
				"tolgaBootstrapRow\tBootstrap row with 2 columns"
			],
			[
				"max",
				"maxlength\tAttr"
			],
			[
				"demo",
				"demoRecord"
			],
			[
				"ng-re",
				"ng-repeat\tAngularJS"
			],
			[
				"th",
				"thead\tTag"
			],
			[
				"copied",
				"copiedSchedule"
			],
			[
				"mer",
				"mergedCell"
			],
			[
				"TRIPWI",
				"TRIPWIDTH"
			],
			[
				"Right",
				"RightText"
			],
			[
				"Fo",
				"FooterText"
			],
			[
				"sm",
				"smLog\tsm-log"
			],
			[
				"sch",
				"scheduleName"
			],
			[
				"schedule",
				"scheduleData"
			],
			[
				"dire",
				"directionId"
			],
			[
				"header",
				"header1"
			],
			[
				"work",
				"worksheet"
			],
			[
				"excel",
				"excelProperties"
			],
			[
				"schedul",
				"scheduleData"
			],
			[
				"sche",
				"scheduleData"
			],
			[
				"gtfs",
				"gtfsHours"
			],
			[
				"expor",
				"exportToTxt"
			],
			[
				"smBo",
				"smBootstrapModal\tsm-bs-modal"
			],
			[
				"tripIs",
				"tripIsPm"
			],
			[
				"dbStop",
				"dbStopTime"
			],
			[
				"fix",
				"fixArrivalTime"
			],
			[
				"byLoc",
				"byLocations"
			],
			[
				"visi",
				"visibleTripIndex"
			],
			[
				"current",
				"currentY"
			],
			[
				"$root",
				"$rootScope\tAngularJS"
			],
			[
				"export",
				"exportService"
			],
			[
				"foo",
				"FooterText"
			],
			[
				"$sc",
				"$scope\tAngularJS"
			],
			[
				"previous",
				"previousStop"
			],
			[
				"pre",
				"previousStopArrivalTimeDate"
			],
			[
				"curr",
				"currentArrivalTimeDate"
			],
			[
				"previ",
				"previousStopArrivalTimeDate"
			],
			[
				"arri",
				"arrivalTimeDate"
			],
			[
				"user",
				"username"
			],
			[
				"getAll",
				"getAllStations"
			],
			[
				"text",
				"textarea\tTag"
			],
			[
				"ower",
				"ownerUsername"
			],
			[
				"ctrl",
				"ctrlKeyPressed"
			],
			[
				"shift",
				"shiftKeyPressed"
			],
			[
				"ctr",
				"ctrlKeyPressed"
			],
			[
				"over",
				"overflow"
			],
			[
				"login",
				"loginAttempts"
			],
			[
				"selectedSch",
				"selectedScheduleInFinder"
			],
			[
				"selectedShell",
				"selectedShellInFinder"
			],
			[
				"mar",
				"margin-right"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"delete",
				"ctxDeleteTrip"
			],
			[
				"find",
				"findArrayElement"
			],
			[
				"key",
				"keyCode"
			],
			[
				"k",
				"keyCode"
			],
			[
				"rou",
				"routeAccess"
			],
			[
				"is",
				"isAuthorized"
			],
			[
				"can",
				"can_Export"
			],
			[
				"requires",
				"requiresAuthentication"
			],
			[
				"$route",
				"$routeParams\tAngularJS"
			],
			[
				"min",
				"min-width"
			],
			[
				"blokc",
				"inline-block"
			],
			[
				"module",
				"moduleName"
			],
			[
				"application",
				"applicationPrivileges"
			],
			[
				"retu",
				"returnValue"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"prev",
				"previousStop"
			],
			[
				"stopSeq",
				"stopSequence"
			],
			[
				"arrival",
				"arrivalTime"
			],
			[
				"trips",
				"trips"
			],
			[
				"stop",
				"stopTimeId"
			],
			[
				"emp",
				"emptyStopTime"
			],
			[
				"right",
				"rightClickEnabled"
			],
			[
				"selected",
				"selectedSchedule"
			],
			[
				"padd",
				"padding-bottom"
			],
			[
				"back",
				"background-color"
			],
			[
				"font",
				"font-size"
			],
			[
				"dra",
				"draftRoutes"
			],
			[
				"shared",
				"sharedDraftRoutes"
			],
			[
				"no",
				"nowrap"
			],
			[
				"parentS",
				"parentScheduleId"
			],
			[
				"endDate",
				"endDateTime"
			],
			[
				"startDat",
				"startDateTime"
			],
			[
				"owner",
				"ownerUsername"
			],
			[
				"$",
				"$http\tAngularJS"
			],
			[
				"min-",
				"min-height"
			],
			[
				"angu",
				"angular-strap"
			],
			[
				"selectedSched",
				"selectedScheduleToSave"
			],
			[
				"isBusy",
				"isBusySavingShell"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"fon",
				"font-size"
			],
			[
				"op",
				"openPopup"
			],
			[
				"eq",
				"equipmentConsistSize"
			],
			[
				"loadin",
				"loadingAnimationDelay"
			],
			[
				"load",
				"loadingAnimationInterval"
			],
			[
				"trip",
				"tripStates"
			],
			[
				"tri",
				"tripStates"
			],
			[
				"page",
				"pageMode"
			],
			[
				"al",
				"text-align"
			],
			[
				"backg",
				"background-color"
			],
			[
				"selectedho",
				"selectedHoverStopId"
			],
			[
				"isD",
				"isShaded"
			],
			[
				"getSch",
				"getScheduleUrl"
			],
			[
				"have",
				"haveMassChanges"
			],
			[
				"saveTopTime",
				"saveStopTime"
			],
			[
				"smL",
				"smLog\tsm-log"
			],
			[
				"smlo",
				"smLog\tsm-log"
			],
			[
				"stopTime",
				"stopTimeIds"
			],
			[
				"equip",
				"equipmentTo"
			],
			[
				"equi",
				"equipmentConsistSize"
			],
			[
				"crew",
				"crewAssignment"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 753,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "gruntfile.js",
			"settings":
			{
				"buffer_size": 7854,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/app/core/app.config.js",
			"settings":
			{
				"buffer_size": 925,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/app/directives/templates/watgFeedbackTemplate.html",
			"settings":
			{
				"buffer_size": 2837,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/app/directives/watgFeedbackDirective.js",
			"settings":
			{
				"buffer_size": 6807,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 980.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"JavaScript",
				"Set Syntax: JavaScript Next"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Format",
				"Format: Javascript"
			],
			[
				"lint",
				"SublimeLinter: Enable Debug Mode"
			],
			[
				"Tag",
				"Tag: Auto-Format Tags on Document"
			],
			[
				"Package Control:In",
				"Package Control: Install Package"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			],
			[
				"Pa",
				"CodeFormatter: Format as Javascript Syntax"
			],
			[
				"",
				"HTMLPrettify"
			],
			[
				"Package Control:",
				"Package Control: Install Package"
			],
			[
				"pref",
				"Preferences: Settings - Default"
			],
			[
				"htmlpre\n",
				"HTMLPrettify: Set Prettify Preferences"
			],
			[
				"htmlpre",
				"HTMLPrettify"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			]
		],
		"width": 1180.0
	},
	"console":
	{
		"height": 768.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/bower_components",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/bower_components/watg-angular-fileupload/dist",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/dev/css",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/dev/js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/dist/js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/core",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/directives",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/directives/templates",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/services",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/tests",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/assets"
	],
	"file_history":
	[
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/.jsbeautifyrc",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/tests/watgFeedbackTestView.html",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/tests/watgFeedbackTestController.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/services/watgFeedbackService.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/gruntfile.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/app.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/index.html",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/package.json",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/directives/watgFeedbackDirective.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/appdist.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/default.html",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/bower.json",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/directives/templates/watgFeedbackTemplate.html",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/app/directives/watgFeedbackFileSelectDirective.js",
		"/D/Tolga/Code/WATG/WATG GitHub/watg-angular-feedback/src/assets/watg-angular-feedback.css",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/reviewsService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/ratingsService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/reviews/reviewsController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/reviews/reviewController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/reviews/reviewsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/appService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/core/app.config.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/about/aboutController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/about/aboutView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/default.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/Server/Content/app-main.less",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/reviewYearsService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/reviewYears/reviewYearsController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/reviewYears/reviewYearsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/managers/managerTeamMembersView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/managers/managersView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/categories/categoriesView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/appSettings/appSettingsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/questions/questionsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/reviewStatuses/reviewStatusesView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/ratings/ratingsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/Gruntfile.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/managersService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/managers/managerTeamMembersController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/managers/managersController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/app.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/bower.json",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/appSettingsService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/administration/appSettings/appSettingsController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/ratings/ratingsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/categories/categoriesController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/questions/questionsController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/ratings/ratingsController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/questions/questionsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/reviewYears/reviewYearsController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/reviewYears/reviewYearsView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/managers/managersController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/reviewStatuses/reviewStatusesController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/reviewStatuses/reviewStatusesView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/managers/managersView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/reviewStatusesService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/questionsService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/categories/categoriesView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/filters/dateFilters.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/services/categoriesService.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/categories/categoryController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/categories/categoryView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/reviewStatuses/reviewStatusController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/ratings/ratingController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/reviewStatuses/reviewStatusView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/ratings/ratingView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/questions/questionView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/settings/questions/questionController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/core/app.const.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/threeSixtees/threeSixteesController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/history/historyController.js",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/history/historyView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/threeSixtees/threeSixteesView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/app/reviews/reviewView.html",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/Server/Content/app-stage.less",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/Server/Content/app-prod.less",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/Server/Content/app-dev.less",
		"/D/Tolga/Code/WATG/WATG Employee Review/WATG.EmployeeReview.Web/watg.employeeReview.sublime-project",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/demoRecords/demoRecordsView.html",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/app.js",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/Gruntfile.js",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/demoRecords/demoRecordView.html",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/demoRecords/demoRecordsController.js",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/services/demoRecordsService.js",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/default.html",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/core/app.config.js",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/Server/Content/app-prod.less",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/Server/Content/app-stage.less",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/Server/Content/app-dev.less",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/Server/Content/app-main.less",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/watg.newhiresandterms.sublime-project",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/core/app.const.js",
		"/D/Tolga/Code/WATGDevOps/New Hires Test/WATG.NewHiresAndTerms.Web/app/services/appService.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/Default.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/core/app.config.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/views/violation.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/views/feedback.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/views/notes.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/views/note.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/controllers/feedbackController.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/Gruntfile.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/directives/templates/wgSingleNoteDetail.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/views/noteDetails.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/default.html",
		"/D/Tolga/Code/WATG/WATG TimeOff/WATG.TimeOff.Web/default.html",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/filters/appFilters.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/app.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/services/appService.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/directives/wgRichtextDirective.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/directives/wgTablePagerDirective.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/Content/style-main.less",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/Content/style-dev.less",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/Content/style-stage.less",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/Content/style-prod.less",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/services/noteService.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/controllers/notesController.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/controllers/violationController.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/directives/wgFileSelectDirective.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/directives/wgEllipseDirective.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/directives/wgFileModelDirective.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/controllers/noteController.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/app/controllers/aboutController.js",
		"/D/Tolga/Code/WATG/WATG.TrustSite/WATG.TrustSite.Web2/watg-trustsite.sublime-project",
		"/D/Tolga/Code/LATA/METRA/Schedule Manager/meanstack/public/app/controllers/scheduleEditorController.js",
		"/D/Tolga/Code/LATA/METRA/Schedule Manager/meanstack/public/app/views/scheduleEditorView.html",
		"/D/Tolga/Code/LATA/METRA/Schedule Manager/meanstack/Gruntfile.js",
		"/D/Tolga/Code/LATA/METRA/Schedule Manager/meanstack/app/controllers/exportexcel.promise.server.controller.js",
		"/D/Tolga/Code/LATA/METRA/Schedule Manager/meanstack/public/index.html"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 220.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"getUrl",
			"a",
			">\n",
			"isAuthenticated",
			"isBusyCheckingAccess",
			"openCtx",
			"exportGtfsToZip",
			"duplicateTrip",
			"getTripColumnStopRowClass",
			" getTripColumnStopRowClass",
			"convertDaysOfWeek",
			"addStopStopTimes",
			"ctxDuplicateTrip",
			"manageTripSelection",
			"manageTripSelection\nmanageTripSelection",
			"manageTripSelection",
			"isPm",
			"directionId",
			"truei",
			"map",
			"schedulesPromise",
			"arrivalTimeDate",
			"bold",
			"fixArrivalTime",
			"showTripBasedOnFilter",
			"byTime",
			"byTimes",
			"text(",
			"text",
			"230",
			"$scope.getTrips",
			"New Sort",
			"stopIds",
			"selectedRoute.stopIds",
			"showTripBasedOnFilter",
			"removeSelectedTrips",
			"massChangeStopTimeArrivalTimes",
			"addStopStopTimes",
			"smModifiedFont",
			"smScheduleEditorEvenRow",
			"getTripColumnClass",
			"fixArrivalTime",
			";\n",
			">\n",
			"submit",
			"ng",
			"required",
			">\n",
			"saveSpecialDaySchedule",
			"saveStopTime",
			"visibleTrips",
			"smBorderedContainerDark",
			"downloadZip",
			"class=\"btn",
			"applicationUserAccess",
			"agencies",
			"buildHelpContent",
			"setSelectedSchedule",
			"agencies",
			"form-control",
			"filter",
			"clickTrip",
			"clearAllSelections",
			"getPageTitle",
			"===",
			"==",
			"canEdit_FareAndZoneEditorModule",
			"applicationUserAccess",
			"select",
			"$scope.applicationUserAccess",
			"createSpecialEventSchedule",
			"create",
			"getShellSchedulesInFinder",
			"showScheduleEditor",
			"openShell",
			"share",
			"GetDrafts",
			"showTripBasedOnFilter",
			"share",
			"setSelectedSpecialEventSchedule",
			"ctxShow",
			"rightClickEnabled",
			"sm_copiedTrip",
			"smRouteColorSquare2",
			"smHorizontalDisplay",
			"/**\n * Created by Kemal on 07/16/15.\n */\n(function() {\n    'use strict';\n    /* jshint loopfunc:true */\n    scheduleMasterApp.controller('scheduleManagerController', function scheduleManagerController($scope, $rootScope, $location, $window, $interval, routeService, scheduleService, shellService, importService, appConfig) {\n        var currentDate = new Date();\n        var currentMonth = currentDate.getMonth() + 1;\n        var currentDay = currentDate.getDate();\n        var currentYear = currentDate.getFullYear();\n        var defaultTimelineColumnWidth = 65;\n        var timelineContainerWidthOffset = 20;\n        var rightClickEnabled = true;\n        $scope.tabName = appConfig.tabName;\n        $rootScope.showMainNavbar = appConfig.showMainNavbar;\n        $scope.header = 'Schedule Manager';\n        $scope.timelineCurrentZoomLevel = \"Months\";\n        $scope.timelineContainerWidth = '200px';\n        $scope.isBusyGettingOpenShells = false;\n        $scope.isBusyGettingAllShells = false;\n        $scope.isBusyWithScheduleEdit = false;\n        $scope.isBusyGettingScheduleDetails = false;\n        $scope.isBusyGettingScheduleInfo = false;\n        $scope.isBusyGettingShellSchedules = false;\n        $scope.isBusyWithSpecialScheduleEdit = false;\n        $scope.isTimelineBusy = false;\n        $scope.hasEditPermissions = true;\n        $scope.pageMode = \"VIEW\";\n        $scope.manageScheduleAction = \"Edit\";\n        $scope.timelineConfig = {\n            isBusy: false\n        };\n        $scope.shellAction = '';\n        $scope.allShells = [];\n        $scope.openShells = [];\n        $scope.routes = [];\n        $scope.selectedShell = {};\n        $scope.selectedShellInFinder = {};\n        $scope.selectedShellToSave = {};\n        $scope.selectedRoute = {};\n        $scope.selectedRouteInFinder = {};\n        $scope.selectedSchedule = {};\n        $scope.selectedScheduleInfo = {};\n        $scope.selectedScheduleInfoInFinder = {};\n        $scope.selectedScheduleInFinder = {};\n        $scope.selectedScheduleToSave = {};\n        $scope.specialScheduleToSave = {\n            days: []\n        };\n        $scope.timelineTableColumns = [];\n        $scope.timelineSelectedTimespanDisplay = moment(currentDate).format('YYYY');\n        $scope.dowArray = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        $scope.rightClickedObject = \"\";\n        $scope.gtfsImport = {\n            file: {}\n        };\n        //shell\n        $scope.openShell = function(shellId) {\n            $(\"#shellOrScheduleFinderModal\").modal(\"hide\");\n            shellService.open(shellId).then(function(response) {\n                $scope.getOpenShells();\n            });\n        };\n        $scope.closeShell = function() {\n            if ($scope.selectedShell.shellId) {\n                shellService.close($scope.selectedShell.shellId).then(function(response) {\n                    $scope.selectedShell = {};\n                    $scope.getOpenShells();\n                });\n            }\n        };\n        $scope.getAllShells = function() {\n            $scope.isBusyGettingAllShells = true;\n            shellService.getAll().then(function(response) {\n                $scope.allShells = response;\n                $scope.isBusyGettingAllShells = false;\n            });\n        };\n        $scope.getOpenShells = function() {\n            $scope.ctxShow = false;\n            $scope.isBusyGettingOpenShells = true;\n            shellService.getOpen().then(function(response) {\n                $scope.openShells = response;\n                $scope.isBusyGettingOpenShells = false;\n            });\n        };\n        $scope.getRoutes = function() {\n            routeService.getRoutes().then(function(response) {\n                if (response) {\n                    $scope.routes = [];\n                    response.forEach(function(dbRoute) {\n                        var routeAccess = $rootScope.findArrayElement($scope.applicationUserAccess.routePermissions, \"routeId\", dbRoute.routeId);\n                        if (routeAccess !== undefined) $scope.routes.push(dbRoute);\n                    });\n                }\n            });\n        };\n        $scope.getShellSchedules = function(shell) {\n            $scope.selectedShell = shell;\n            if ($scope.selectedShell.showShellRoutes === undefined) $scope.selectedShell.showShellRoutes = true;\n            else $scope.selectedShell.showShellRoutes = !$scope.selectedShell.showShellRoutes;\n            if ($scope.selectedShell.showShellRoutes === true) {\n                $scope.selectedShell.isBusyGettingRoutes = true;\n                $scope.isBusyGettingShellSchedules = true;\n                shellService.getScheduleDates($scope.selectedShell.shellId, 'T').then(function(response) {\n                    //group data by route\n                    if ($scope.selectedShell.routes === undefined) $scope.selectedShell.routes = [];\n                    $scope.selectedShell.routes = [];\n                    //routes\n                    for (var i = 0; i < response.length; i++) {\n                        var routeAccess = $rootScope.findArrayElement($scope.applicationUserAccess.routePermissions, \"routeId\", response[i].routeId);\n                        if (routeAccess !== undefined) {\n                            $scope.selectedShell.routes.push({\n                                routeId: response[i].routeId,\n                                longName: response[i].longName,\n                                routeColor: response[i].routeColor,\n                                textColor: response[i].textColor,\n                                startDate: response[i].startDate,\n                                endDate: response[i].endDate,\n                                maxStartDate: new Date('12/15/2014'),\n                                maxEndDate: new Date('01/15/2016'),\n                                sortOrder: response[i].sortOrder,\n                                showChildren: false,\n                                //base schedule\n                                childSchedules: [{\n                                    scheduleId: response[i].scheduleId,\n                                    scheduleName: response[i].scheduleName,\n                                    startDate: response[i].startDate,\n                                    endDate: response[i].endDate,\n                                    showChildren: false,\n                                    childSchedules: response[i].childSchedules\n                                }]\n                            });\n                        }\n                    }\n                    $scope.selectedShell.isBusyGettingRoutes = false;\n                    $scope.updateTimelineTimespan();\n                    $scope.isBusyGettingShellSchedules = false;\n                });\n            }\n        };\n        $scope.getShellDrafts = function() {\n            if ($scope.selectedShell.showShellDrafts === undefined) $scope.selectedShell.showShellDrafts = true;\n            else $scope.selectedShell.showShellDrafts = !$scope.selectedShell.showShellDrafts;\n            if ($scope.selectedShell.showShellDrafts === true) {\n                $scope.selectedShell.isBusyGettingDrafts = true;\n                shellService.getScheduleDrafts($scope.selectedShell.shellId).then(function(response) {\n                    if (response !== false) {\n                        //group data by route\n                        if ($scope.selectedShell.draftRoutes === undefined) $scope.selectedShell.draftRoutes = [];\n                        $scope.selectedShell.draftRoutes = [];\n                        response.forEach(function(draft) {\n                            var uiDraft = $rootScope.findArrayElement($scope.selectedShell.draftRoutes, \"longName\", draft.longName);\n                            if (uiDraft === undefined) {\n                                uiDraft = {\n                                    routeId: draft.routeId,\n                                    longName: draft.longName,\n                                    routeColor: draft.routeColor,\n                                    textColor: draft.textColor,\n                                    sortOrder: draft.sortOrder,\n                                    childSchedules: [{\n                                        scheduleId: draft.scheduleId,\n                                        scheduleName: draft.scheduleName,\n                                        startDate: draft.startDate,\n                                        endDate: draft.endDate,\n                                        showChildren: false,\n                                        childSchedules: [],\n                                        isDraft: true,\n                                        isShared: false\n                                        }]\n                                };\n                                var routeAccess = $rootScope.findArrayElement($scope.applicationUserAccess.routePermissions, \"routeId\", uiDraft.routeId);\n                                if (routeAccess !== undefined) {\n                                    $scope.selectedShell.draftRoutes.push(uiDraft);\n                                }\n                            } else {\n                                uiDraft.childSchedules.push({\n                                    scheduleId: draft.scheduleId,\n                                    scheduleName: draft.scheduleName,\n                                    startDate: draft.startDate,\n                                    endDate: draft.endDate,\n                                    showChildren: false,\n                                    childSchedules: [],\n                                    isDraft: true,\n                                    isShared: false\n                                });\n                            }\n                        });\n                        $scope.selectedShell.isBusyGettingDrafts = false;\n                    }\n                });\n            }\n        };\n        $scope.getShellSharedDrafts = function() {\n            if ($scope.selectedShell.showShellSharedDrafts === undefined) $scope.selectedShell.showShellSharedDrafts = true;\n            else $scope.selectedShell.showShellSharedDrafts = !$scope.selectedShell.showShellSharedDrafts;\n            if ($scope.selectedShell.showShellSharedDrafts === true) {\n                $scope.selectedShell.isBusyGettingSharedDrafts = true;\n                shellService.getScheduleSharedDrafts($scope.selectedShell.shellId).then(function(response) {\n                    if (response !== false) {\n                        //group data by route\n                        if ($scope.selectedShell.sharedDraftRoutes === undefined) $scope.selectedShell.sharedDraftRoutes = [];\n                        $scope.selectedShell.sharedDraftRoutes = [];\n                        response.forEach(function(sharedDraft) {\n                            var uiDraft = $rootScope.findArrayElement($scope.selectedShell.sharedDraftRoutes, \"longName\", sharedDraft.longName);\n                            if (uiDraft === undefined) {\n                                uiDraft = {\n                                    routeId: sharedDraft.routeId,\n                                    longName: sharedDraft.longName,\n                                    routeColor: sharedDraft.routeColor,\n                                    textColor: sharedDraft.textColor,\n                                    sortOrder: sharedDraft.sortOrder,\n                                    childSchedules: [{\n                                        scheduleId: sharedDraft.scheduleId,\n                                        scheduleName: sharedDraft.scheduleName,\n                                        startDate: sharedDraft.startDate,\n                                        endDate: sharedDraft.endDate,\n                                        showChildren: false,\n                                        childSchedules: [],\n                                        isDraft: false,\n                                        isShared: true\n                                        }]\n                                };\n                                var routeAccess = $rootScope.findArrayElement($scope.applicationUserAccess.routePermissions, \"routeId\", uiDraft.routeId);\n                                if (routeAccess !== undefined) {\n                                    $scope.selectedShell.sharedDraftRoutes.push(uiDraft);\n                                }\n                            } else {\n                                uiDraft.childSchedules.push({\n                                    scheduleId: sharedDraft.scheduleId,\n                                    scheduleName: sharedDraft.scheduleName,\n                                    startDate: sharedDraft.startDate,\n                                    endDate: sharedDraft.endDate,\n                                    showChildren: false,\n                                    childSchedules: [],\n                                    isDraft: false,\n                                    isShared: true\n                                });\n                            }\n                        });\n                        $scope.selectedShell.isBusyGettingSharedDrafts = false;\n                    }\n                });\n            }\n        };\n        $scope.prepareToCreateNewShell = function() {\n            $scope.selectedShellToSave = {\n                _id: $rootScope.createGUID(),\n                shellId: $rootScope.createGUID(),\n                shellName: \"\",\n                ownerUsername: \"\",\n                startDate: '20150101',\n                endDate: '20151231',\n                startDateTime: new Date('1/1/2015'),\n                endDateTime: new Date('12/31/2015'),\n                isDeleted: false,\n                isPublished: false,\n                routeServices: [],\n                routeServiceIds: [],\n                schedules: [],\n                scheduleIds: [],\n                description: \"\"\n            };\n            $scope.shellAction = 'Add';\n            $(\"#manageShellModal\").modal(\"show\");\n            $scope.ctxShow = false;\n        };\n        $scope.prepareToCreateNewSchedule = function() {\n            $scope.selectedScheduleToSave = {\n                _id: 0,\n                shellId: $scope.selectedShell.shellId,\n                routeId: $scope.selectedSchedule.scheduleId !== undefined ? $scope.selectedSchedule.routeId : \"\",\n                scheduleId: $rootScope.createGUID(),\n                scheduleName: \"\",\n                isBase: $scope.selectedSchedule.scheduleId === undefined,\n                startDateTime: new Date(\"1/1/\" + currentDate.getFullYear()),\n                endDateTime: new Date(\"12/31/\" + currentDate.getFullYear()),\n                description: \"\"\n            };\n            if ($scope.selectedShell.shellId !== undefined && $scope.selectedSchedule.scheduleId === undefined) $scope.manageScheduleAction = \"Add Blank Schedule to Shell: \" + $scope.selectedShell.shellName;\n            else if ($scope.selectedShell.shellId !== undefined && $scope.selectedSchedule.scheduleId !== undefined) {\n                $scope.manageScheduleAction = \"Add Blank Schedule to Base: \" + $scope.selectedSchedule.scheduleName;\n                $scope.selectedScheduleToSave.routeId = $scope.selectedSchedule.routeId;\n                $scope.selectedScheduleToSave.parentScheduleId = $scope.selectedSchedule.scheduleId;\n            }\n            $(\"#manageScheduleModal\").modal(\"show\");\n            $scope.ctxShow = false;\n        };\n        $scope.prepareToCreateSpecialDaySchedule = function() {\n            $scope.specialDayScheduleToSave = {\n                _id: 0,\n                shellId: $scope.selectedShell.shellId,\n                scheduleId: $scope.selectedSchedule.scheduleId || \"\",\n                startDate: moment(),\n                endDate: moment(),\n                scheduleName: \"\",\n                dow: \"\",\n                description: \"\"\n            };\n            $(\"#addSpecialDayScheduleModal\").modal(\"show\");\n            $scope.ctxShow = false;\n        };\n        $scope.prepareToCreateSpecialEventSchedule = function() {\n            $scope.specialEventScheduleToSave = {\n                _id: 0,\n                shellId: $scope.selectedShell.shellId,\n                scheduleId: \"\",\n                scheduleName: \"\",\n                days: [],\n                description: \"\"\n            };\n            $(\"#addSpecialEventScheduleModal\").modal(\"show\");\n            $scope.ctxShow = false;\n        };\n        $scope.setSelectedSpecialEventSchedule = function(schedule) {\n            $scope.specialEventScheduleToSave.scheduleId = schedule.scheduleId;\n        };\n        $scope.addSelectedDayToSpecialEventSchedule = function() {\n            if ($scope.specialEventScheduleToSave.day) {\n                $scope.specialEventScheduleToSave.days.push($scope.specialEventScheduleToSave.day);\n                $scope.specialEventScheduleToSave.day = \"\";\n            }\n        };\n        $scope.showShellManagerModal = function() {\n            $scope.selectedShellToSave = angular.copy($scope.selectedShell);\n            $scope.shellAction = 'Edit';\n            $(\"#manageShellModal\").modal(\"show\");\n            $scope.ctxShow = false;\n        };\n        $scope.saveShell = function() {\n            $scope.isBusySavingShell = true;\n            $rootScope.log($scope.selectedShellToSave, \"saveShell\", \"log\", \"console\");\n            shellService.save($scope.selectedShellToSave).then(function(response) {\n                $rootScope.log(response, \"saveShell\", \"log\", \"console\");\n                if (response.status === 200 && response.data !== false) {\n                    $rootScope.log(\"Added\", \"Shell\", \"log\", \"toast\");\n                    $scope.getOpenShells();\n                } else {\n                    $rootScope.log(\"Error Saving\", \"Shell\", \"error\", \"toast\");\n                }\n                $scope.selectedShellToSave = {};\n                $(\"#manageShellModal\").modal('hide');\n                $scope.isBusySavingShell = false;\n                $scope.getOpenShells();\n            });\n        };\n        $scope.saveSchedule = function() {\n            $scope.isBusyWithScheduleEdit = true;\n            $scope.selectedScheduleToSave.startDate = moment($scope.selectedScheduleToSave.startDateTime).format('MM/DD/YYYY');\n            $scope.selectedScheduleToSave.endDate = moment($scope.selectedScheduleToSave.endDateTime).format(\"MM/DD/YYYY\");\n            $rootScope.log($scope.selectedScheduleToSave, \"selectedScheduleToSave-save\", \"log\", \"console\");\n            scheduleService.saveSchedule($scope.selectedScheduleToSave).then(function(response) {\n                if (response.status === 200 && response.data !== false) {\n                    $rootScope.log(\"Saved\", \"Schedule\", \"log\", \"toast\");\n                    scheduleService.getSchedule($scope.selectedShell.shellId, $scope.selectedScheduleToSave.scheduleId).then(function(response) {\n                        if (response.status === 200 && response.data !== false) {\n                            $scope.isBusyGettingScheduleDetails = false;\n                            $scope.selectedSchedule = response.data;\n                            $scope.selectedScheduleToSave = {};\n                            updateUIScheduleObject();\n                            $scope.selectedSchedule = {};\n                        }\n                    });\n                } else {\n                    $rootScope.log(\"Error Saving\", \"Schedule\", \"error\", \"toast\");\n                }\n                $scope.isBusyWithScheduleEdit = false;\n                $(\"#manageScheduleModal\").modal(\"hide\");\n            });\n        };\n        $scope.saveSpecialDaySchedule = function() {\n            $scope.isBusyWithSpecialDaySchedule = true;\n            $scope.specialDayScheduleToSave.startDate = moment($scope.specialDayScheduleToSave.startDate).format('MM/DD/YYYY');\n            $scope.specialDayScheduleToSave.endDate = moment($scope.specialDayScheduleToSave.endDate).format(\"MM/DD/YYYY\");\n            $rootScope.log($scope.specialDayScheduleToSave, \"specialDayScheduleToSave-save\", \"log\", \"console\");\n            scheduleService.saveSpecialDaySchedule($scope.specialDayScheduleToSave).then(function(response) {\n                if (response.status === 200 && response.data !== false) {\n                    $rootScope.log(\"Saved\", \"Special Day Schedule\", \"log\", \"toast\");\n                } else {\n                    $rootScope.log(\"Error Saving\", \"Speicial Day Schedule\", \"error\", \"toast\");\n                }\n                $scope.specialDayScheduleToSave = {};\n                $scope.isBusyWithSpecialDaySchedule = false;\n                $(\"#addSpecialDayScheduleModal\").modal(\"hide\");\n            });\n        };\n        $scope.saveSpecialEventSchedule = function() {\n            $scope.isBusyWithSpecialEventSchedule = true;\n            $scope.specialEventScheduleToSave.startDate = moment($scope.specialEventScheduleToSave.startDate).format('MM/DD/YYYY');\n            $scope.specialEventScheduleToSave.endDate = moment($scope.specialEventScheduleToSave.endDate).format(\"MM/DD/YYYY\");\n            $rootScope.log($scope.specialEventScheduleToSave, \"specialEventScheduleToSave-save\", \"log\", \"console\");\n            scheduleService.saveSpecialEventSchedule($scope.specialEventScheduleToSave).then(function(response) {\n                if (response.status === 200 && response.data !== false) {\n                    $rootScope.log(\"Saved\", \"Special Event Schedule\", \"log\", \"toast\");\n                } else {\n                    $rootScope.log(\"Error Saving\", \"Speicial Event Schedule\", \"error\", \"toast\");\n                }\n                $scope.specialEventScheduleToSave = {};\n                $scope.isBusyWithSpecialEventSchedule = false;\n                $(\"#addSpecialEventScheduleModal\").modal(\"hide\");\n            });\n        };\n        $scope.saveShellAs = function() {\n            if ($scope.selectedShell.shellName !== undefined) {\n                var newShellName = prompt(\"Coping \\\"\" + $scope.selectedShell.shellName + \"\\\". Please select a unique name for the new shell name\", $scope.selectedShell.shellName + \"-copy\");\n                if (newShellName !== null && newShellName) {\n                    var shellNameExists = $rootScope.findArrayElement($scope.allShells, \"shellName\", newShellName);\n                    $rootScope.setLongToastrOptions();\n                    if (shellNameExists === undefined) {\n                        shellService.copy($scope.selectedShell.shellId, newShellName).then(function(result) {\n                            $rootScope.log(\"Save As\", $scope.selectedShell.shellName + \" has been scheduled for copy. Please check back in about 2-5 minutes\", \"info\", \"toast\");\n                            $rootScope.resetToastrOptions();\n                        });\n                    } else {\n                        $rootScope.log(\"Save As Input Error\", \"A shell with this name already exists. Please enter a unique name\", \"error\", \"toast\");\n                        $rootScope.resetToastrOptions();\n                    }\n                }\n            }\n        };\n        $scope.shareSchedule = function() {\n            $scope.ctxShow = false;\n            $scope.selectedSchedule.isShared = true;\n            $rootScope.log($scope.selectedSchedule, \"selectedSchedule-share\", \"log\", \"console\");\n            scheduleService.saveSchedule($scope.selectedSchedule).then(function(response) {\n                if (response.status === 200 && response.data !== false) {\n                    $rootScope.log(\"Shared\", \"Schedule\", \"log\", \"toast\");\n                    //get Shared Schedules\n                    $scope.getShellDrafts();\n                    $scope.getShellSharedDrafts();\n                } else {\n                    $rootScope.log(\"Error Sharing\", \"Schedule\", \"error\", \"toast\");\n                }\n                $scope.selectedSchedule = {};\n            });\n        };\n        $scope.setSelectedShell = function(shell) {\n            $scope.selectedShell = shell;\n            $scope.selectedRoute = {};\n            $scope.selectedSchedule = {};\n            $scope.ctxShow = false;\n        };\n        $scope.setSelectedRoute = function(route) {\n            $scope.selectedRoute = route;\n            $scope.ctxShow = false;\n        };\n        $scope.setSelectedSchedule = function(schedule) {\n            $scope.ctxShow = false;\n            $scope.isBusyGettingScheduleDetails = true;\n            $scope.selectedSchedule = {};\n            $scope.selectedScheduleInfo = {};\n            scheduleService.getSchedule($scope.selectedShell.shellId, schedule.scheduleId).then(function(response) {\n                if (response.status === 200 && response.data !== false) {\n                    $scope.isBusyGettingScheduleDetails = false;\n                    $scope.selectedSchedule = response.data;\n                    $rootScope.log($scope.selectedSchedule, \"selectedSchedule\", \"log\", \"console\");\n                    $scope.isBusyGettingScheduleInfo = true;\n                    if ($scope.selectedSchedule.isBase === false) {\n                        scheduleService.getScheduleInfo($scope.selectedShell.shellId, schedule.scheduleId).then(function(response) {\n                            if (response.status === 200 && response.data !== false) {\n                                $scope.isBusyGettingScheduleInfo = false;\n                                $scope.selectedScheduleInfo = response.data;\n                                $rootScope.log($scope.selectedScheduleInfo, \"selectedScheduleInfo\", \"log\", \"console\");\n                            }\n                        });\n                    }\n                }\n            });\n        };\n        //timeline\n        $scope.timelineShowPrevious = function() {\n            if ($scope.timelineCurrentZoomLevel === \"Months\") {\n                currentDate.setFullYear(currentDate.getFullYear() - 1);\n            } else {\n                currentDate.setMonth(currentDate.getMonth() - 1);\n            }\n            $scope.updateTimelineTimespan();\n        };\n        $scope.timelineShowNext = function() {\n            if ($scope.timelineCurrentZoomLevel === \"Months\") {\n                currentDate.setFullYear(currentDate.getFullYear() + 1);\n            } else {\n                currentDate.setMonth(currentDate.getMonth() + 1);\n            }\n            $scope.updateTimelineTimespan();\n        };\n        $scope.timelineZoomIn = function() {\n            $scope.timelineCurrentZoomLevel = \"Days\";\n            $scope.updateTimelineTimespan();\n        };\n        $scope.timelineZoomOut = function() {\n            $scope.timelineCurrentZoomLevel = \"Months\";\n            $scope.updateTimelineTimespan();\n        };\n        $scope.updateTimelineTimespan = function() {\n            var daysInMonths = 0;\n            var date;\n            var availableWidth = $(\"#timelineContainer\").innerWidth() - timelineContainerWidthOffset;\n            $rootScope.log(availableWidth, \"log\");\n            if ($scope.timelineCurrentZoomLevel === \"Months\") {\n                $scope.timelineSelectedTimespanDisplay = moment(currentDate).format('YYYY');\n                $scope.timelineTableColumns = [];\n                for (var i = 0; i < 12; i++) {\n                    daysInMonths = new Date(currentDate.getFullYear(), (i + 1), 0).getDate();\n                    date = (i + 1) + '/1/' + currentDate.getFullYear();\n                    var endDate = (i + 1) + '/' + daysInMonths + '/' + currentDate.getFullYear();\n                    var monthDate = moment(date).format(\"MMM\");\n                    $scope.timelineTableColumns.push({\n                        display: monthDate,\n                        startDate: date,\n                        endDate: endDate,\n                        isHighlight: false\n                    });\n                }\n            } else {\n                $scope.timelineSelectedTimespanDisplay = moment(currentDate).format('MMM YYYY');\n                daysInMonths = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n                var currentMonth = currentDate.getMonth() + 1;\n                $scope.timelineTableColumns = [];\n                for (var ii = 0; ii < daysInMonths; ii++) {\n                    date = currentMonth + '/' + (ii + 1) + '/' + currentDate.getFullYear();\n                    var dayDate = moment(date).format(\"dd,D\");\n                    var isWeekEnd = (moment(date).day() === 0 || moment(date).day() === 6);\n                    if (availableWidth < 700) dayDate = dayDate.substring(0, 1);\n                    $scope.timelineTableColumns.push({\n                        display: dayDate,\n                        startDate: date,\n                        endDate: date,\n                        isHighlight: isWeekEnd\n                    });\n                }\n            }\n            if (availableWidth) defaultTimelineColumnWidth = availableWidth / $scope.timelineTableColumns.length;\n            $scope.timelineColumnWidth = defaultTimelineColumnWidth - 1 + 'px'; //1 is for right-border\n            $scope.timelineContainerWidth = ($scope.timelineTableColumns.length * defaultTimelineColumnWidth) + 'px';\n        };\n        //validations\n        $scope.validateUniqueShellName = function() {\n            if ($scope.selectedShellToSave.shellName) {\n                var isValid = true;\n                for (var i = 0; i < $scope.openShells.length; i++) {\n                    if ($scope.openShells[i].shellName === $scope.selectedShellToSave.shellName) isValid = false;\n                }\n                if (!isValid) {\n                    $rootScope.log(\"The shell name you entered has already been taken. Please choose another one\", \"Validation Error\", \"error\", \"toast\");\n                    $scope.selectedShellToSave.shellName = '';\n                }\n            }\n        };\n        $scope.validateUniqueScheduleId = function() {\n            if ($scope.selectedScheduleToSave.scheduleId) {\n                var isValid = true;\n                if (!isValid) {\n                    $rootScope.log(\"The schedule ID you entered has already been taken. Please choose another one\", \"Validation Error\", \"error\", \"toast\");\n                    $scope.selectedScheduleToSave.scheduleId = '';\n                }\n            }\n        };\n        $scope.validateUniqueScheduleName = function() {\n            if ($scope.selectedScheduleToSave.scheduleName) {\n                var isValid = true;\n                if (!isValid) {\n                    $rootScope.log(\"The schedule name you entered has already been taken. Please choose another one\", \"Validation Error\", \"error\", \"toast\");\n                    $scope.selectedScheduleToSave.scheduleName = '';\n                }\n            }\n        };\n        //editor\n        $scope.showScheduleEditor = function(shellId, scheduleId) {\n            if (shellId !== undefined && scheduleId !== undefined) {\n                var scheduleEditorWindow = openPopup(\"scheduleEditor\", shellId, scheduleId);\n                var getDraftTriggerInterval = $interval(function() {\n                    var lsValue = $rootScope.getLocalStorage(\"GetDrafts\");\n                    $rootScope.log(\"Checking Draft Request\", \"Drafts Request\", \"log\", \"console\");\n                    if (lsValue !== null && lsValue === true) {\n                        $rootScope.setLocalStorage(\"GetDrafts\", false);\n                        $interval.cancel(getDraftTriggerInterval);\n                        $rootScope.log(\"Getting Drafts\", \"Drafts Request\", \"log\", \"console\");\n                        $scope.selectedShell.showShellDrafts = undefined;\n                        $scope.getShellDrafts();\n                    }\n                }, 5000);\n            }\n        };\n        $scope.showStringlineEditor = function() {\n            if ($scope.selectedShell.shellId !== undefined && $scope.selectedSchedule.scheduleId !== undefined) {\n                openPopup(\"stringlineEditor\", $scope.selectedShell.shellId, $scope.selectedSchedule.scheduleId);\n            }\n        };\n        $scope.openCtx = function(event, rightClickedObject) {\n            $scope.ctxShow = true;\n            $scope.selectedTripId = $scope.selectedHoverTripId;\n            $scope.popY = event.clientY + 10;\n            $scope.popX = event.clientX;\n            $scope.rightClickedObject = rightClickedObject;\n            //$scope.$apply();\n        };\n        $scope.ctxClose = function() {\n            $scope.ctxShow = false;\n        };\n        $scope.showScheduleManagerModal = function() {\n            if ($scope.selectedSchedule.scheduleId !== undefined) {\n                $scope.ctxShow = false;\n                $(\"#manageScheduleModal\").modal(\"show\");\n                $scope.selectedScheduleToSave = angular.copy($scope.selectedSchedule);\n                $scope.selectedScheduleToSave.startDateTime = new Date($scope.selectedScheduleToSave.startDateTime);\n                $scope.selectedScheduleToSave.endDateTime = new Date($scope.selectedScheduleToSave.endDateTime);\n                $scope.manageScheduleAction = \"Edit Schedule: \" + $scope.selectedSchedule.scheduleName;\n            }\n        };\n        $scope.mouseOverSchedule = function(scheduleId) {\n            $scope.selectedHoverScheduleId = scheduleId;\n        };\n        $scope.mouseLeaveSchedule = function() {\n            $scope.selectedHoverScheduleId = '';\n        };\n        $scope.openFinderModal = function() {\n            $(\"#shellOrScheduleFinderModal\").modal(\"show\");\n        };\n        $scope.getShellSchedulesInFinder = function(shell) {\n            $scope.selectedShellInFinder = shell;\n            shellService.getScheduleDates($scope.selectedShellInFinder.shellId, 'T').then(function(response) {\n                //group data by route\n                if ($scope.selectedShellInFinder.routes === undefined) $scope.selectedShellInFinder.routes = [];\n                $scope.selectedShellInFinder.routes = [];\n                //routes\n                for (var i = 0; i < response.length; i++) {\n                    $scope.selectedShellInFinder.routes.push({\n                        routeId: response[i].routeId,\n                        longName: response[i].longName,\n                        routeColor: response[i].routeColor,\n                        textColor: response[i].textColor,\n                        startDate: response[i].startDate,\n                        endDate: response[i].endDate,\n                        sortOrder: response[i].sortOrder,\n                        showChildren: false,\n                        //base schedule\n                        childSchedules: [{\n                            scheduleId: response[i].scheduleId,\n                            scheduleName: response[i].scheduleName,\n                            startDate: response[i].startDate,\n                            endDate: response[i].endDate,\n                            showChildren: false,\n                            childSchedules: response[i].childSchedules\n                                }]\n                    });\n                }\n            });\n        };\n        $scope.setSelectedRouteInFinder = function(route) {\n            $scope.selectedRouteInFinder = route;\n        };\n        $scope.setSelectedScheduleInFinder = function(s) {\n            $scope.isBusyGettingScheduleDetailsInFinder = true;\n            $scope.ctxShow = false;\n            $scope.selectedScheduleInfoInFinder = {};\n            scheduleService.getSchedule($scope.selectedShellInFinder.shellId, s.scheduleId).then(function(response) {\n                if (response.status === 200 && response.data !== false) {\n                    $scope.isBusyGettingScheduleDetailsInFinder = false;\n                    $scope.selectedScheduleInFinder = response.data;\n                    $rootScope.log($scope.selectedScheduleInFinder, \"selectedScheduleInFinder\", \"log\", \"console\");\n                    if ($scope.selectedScheduleInFinder.isBase === false) {\n                        scheduleService.getScheduleInfo($scope.selectedShellInFinder.shellId, s.scheduleId).then(function(response) {\n                            if (response.status === 200 && response.data !== false) {\n                                $scope.isBusyGettingScheduleInfo = false;\n                                $scope.selectedScheduleInfoInFinder = response.data;\n                            }\n                        });\n                    }\n                }\n            });\n        };\n        $scope.prepareForGtfsFilesImport = function() {\n            $(\"#importModal\").modal(\"show\");\n            $scope.gtfsImport = {\n                maxFileSize: (1024 * 1024) * 5,\n                files: [],\n                messages: [],\n                isBusy: false\n            };\n        };\n        $scope.importGtfsFiles = function() {\n            //send first selected file.\n            importService.importGtfsFiles($scope.gtfsImport.file).then(function(result) {\n                $rootScope.log(result, \"import result\", \"log\", \"console\");\n                if (result.data === true) { //success\n                    $rootScope.log('Import', 'Successfully imported ' + result.config.data.file.name, \"log\", \"toast\");\n                } else {\n                    $rootScope.log('Import', 'Error importing ' + result.config.data.file.name + '. Code: ' + result.status, \"error\", \"toast\");\n                }\n                $(\"#importModal\").modal(\"hide\");\n            });\n        };\n        $scope.userHasEditRightsToSelectedObject = function() {\n            var retVal = false;\n            if ($scope.selectedSchedule.scheduleId !== undefined) {\n                if ($rootScope.applicationUserAccess.canEdit_ScheduleManagerModule === true) retVal = true;\n                else {\n                    var routeAccess = $rootScope.findArrayElement($scope.applicationUserAccess.routePermissions, \"routeId\", $scope.selectedSchedule.routeId);\n                    if (routeAccess !== undefined) {\n                        retVal = routeAccess.authorization === \"Edit\";\n                    }\n                }\n            }\n            return retVal;\n        };\n        // $(window).mousedown(function(e) {\n        //     if (e.which === 3) {\n        //         if ($scope.selectedSchedule.scheduleId !== undefined || $scope.selectedShell.shellId !== undefined) {\n        //             $scope.openCtx(e);\n        //         }\n        //     }\n        // });\n        // document.addEventListener(\"contextmenu\", function(e) {\n        //     if (rightClickEnabled) e.preventDefault();\n        // });\n        function openPopup(popupRoute, shellId, scheduleId) {\n            $scope.ctxShow = false;\n            $window.$scope = $scope;\n            var height = $window.innerHeight * 0.8;\n            var width = $window.innerWidth * 0.8;\n            if (height < 500) height = 500;\n            if (width < 1000) width = 1000;\n            var left = ($window.innerWidth / 2) - (width / 2);\n            var top = ($window.innerHeight / 2) - (height / 2);\n            var isDraft = false;\n            var strWindowFeatures = \"menubar=no,location=no,resizable=no,scrollbars=no,status=no,top=\" + top + \",left=\" + left + \",width=\" + width + \",height=\" + height;\n            var path = '#/' + popupRoute + '/' + shellId + '/' + scheduleId;\n            return $window.open(path, scheduleId, strWindowFeatures);\n        }\n\n        function updateUIScheduleObject() {\n            if ($scope.selectedSchedule.isDraft === false && $scope.selectedSchedule.isShared === false) {\n                //regular schedules\n                if ($scope.selectedShell.routes !== undefined) {\n                    $scope.selectedShell.routes.forEach(function(route) {\n                        route.childSchedules.forEach(function(childSchedule) {\n                            recurseThroughSchedules(childSchedule);\n                        });\n                    });\n                }\n            } else if ($scope.selectedSchedule.isDraft === true && $scope.selectedSchedule.isShared === false) {\n                //regular schedules\n                if ($scope.selectedShell.draftRoutes !== undefined) {\n                    $scope.selectedShell.draftRoutes.forEach(function(route) {\n                        route.childSchedules.forEach(function(childSchedule) {\n                            recurseThroughSchedules(childSchedule);\n                        });\n                    });\n                }\n            } else if ($scope.selectedSchedule.isDraft === true && $scope.selectedSchedule.isShared === true) {\n                //regular schedules\n                if ($scope.selectedShell.sharedDraftRoutes !== undefined) {\n                    $scope.selectedShell.sharedDraftRoutes.forEach(function(route) {\n                        route.childSchedules.forEach(function(childSchedule) {\n                            recurseThroughSchedules(childSchedule);\n                        });\n                    });\n                }\n            }\n        }\n\n        function recurseThroughSchedules(schedule) {\n            if (schedule.childSchedules) {\n                schedule.childSchedules.forEach(function(childSchedule) {\n                    recurseThroughSchedules(childSchedule);\n                });\n            }\n            if (schedule.scheduleId === $scope.selectedSchedule.scheduleId) {\n                $rootScope.log(schedule, \"UI schedule found\", \"log\", \"console\");\n                schedule.scheduleName = $scope.selectedSchedule.scheduleName;\n                schedule.description = $scope.selectedSchedule.description;\n                schedule.startDate = $scope.selectedSchedule.startDateTime;\n                schedule.endDate = $scope.selectedSchedule.endDateTime;\n            }\n        }\n        //init\n        $scope.getOpenShells();\n        $scope.getAllShells();\n        $scope.getRoutes();\n    });\n}());\n",
			"_self",
			"isBusyWithSpecialDaySchedule",
			"availableHeight",
			"color: red",
			"red",
			"$scope.tripStates[2]",
			"getAllShells",
			"logsEnabled",
			"findArrayElement",
			"smScheduleTreeNode",
			"hasEditPermissions",
			"for",
			"#777",
			"777",
			"modal",
			"shells",
			"$scope.shells",
			"getShells",
			"dblClickStopTime",
			"specialDaySchedule",
			"openPopup",
			"smFilterSectionRow",
			"inline-block",
			"getTripHoverCss",
			"appliedfilter",
			"showTripBasedOnFilter",
			"stopTimeIndex",
			"relative",
			"smScheduleEditorTrips",
			"availableHeight",
			"smScheduleEditorTripsContainer",
			"tripEditHeight",
			"smScheduleEditorLastRow",
			"tripWidth",
			"smScheduleEditorTripsContainer",
			"stopsContainerWidth",
			"availableHeight",
			"availableTripContainerWidth",
			"stopTimeEditWidth",
			"stopTimeEditHeight",
			"tripEditWidth",
			"tripEditHeight"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"$scope.openShells"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 753,
						"regions":
						{
						},
						"selection":
						[
							[
								495,
								495
							]
						],
						"settings":
						{
							"is_xml": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "gruntfile.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7854,
						"regions":
						{
						},
						"selection":
						[
							[
								67,
								77
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/app/core/app.config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 925,
						"regions":
						{
						},
						"selection":
						[
							[
								272,
								272
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/app/directives/templates/watgFeedbackTemplate.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2837,
						"regions":
						{
						},
						"selection":
						[
							[
								2672,
								2672
							]
						],
						"settings":
						{
							"is_xml": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/app/directives/watgFeedbackDirective.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6807,
						"regions":
						{
						},
						"selection":
						[
							[
								457,
								457
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 86.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 931.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "watg-angular-feedback.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1045.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"D:\\Tolga\\Code\\WATG\\WATG X\\Webs\\WATG1-2.6.Web\\watg1-2.6.sublime-project"
			]
		],
		"width": 950.0
	},
	"select_symbol":
	{
		"height": 980.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 2950.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 334.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
